using System;
using System.Collections.Generic;

namespace ArgumentParser
{


	/// <summary>
	/// Represents an example class for parsing
	/// </summary>
	/// //[ParameterCollection]
	public partial class ParserExample
	{
		/// <summary>
		/// Gets or sets the example option.
		/// </summary>
		public string Option { get; set; } = string.Empty;

		/// <summary>
		/// Gets or sets the example positional argument.
		/// </summary>
		public string Positional { get; set; } = string.Empty;

		/// <summary>
		/// Gets or sets the example flag.
		/// </summary>
		public bool Flag { get; set; }

		/// <summary>
		/// Parses the provided arguments into a ParserExample instance and a list of errors.
		/// </summary>
		/// <param name="args">The array of arguments to parse.</param>
		/// <returns>A tuple containing the ParserExample instance and a list of errors.</returns>
		public static (ParserExample result, List<ArgumentParserException> errors) Parse(string[] args)
		{
			//create a new instance of the class
			var instance = new ParserExample();
			// create a list to hold any errors that occur during parsing
			var errors = new List<ArgumentParserException>();
			// predetermined collections of options, positional arguments, and flags
			// as generated by the source generator
			var options = new[] {
			new OptionAttribute("o", "option", "An example option", true),
		};
			var positionals = new[] {
			new PositionalAttribute(0, "An example positional argument", true),
		};
			var flags = new[] {
			new FlagAttribute("f", "flag", "An example flag"),
		};

			var (tokens, err) = new ArgumentTokenizer().TokenizeArguments(args, options, positionals, flags);
			foreach (var token in tokens)
			{
				switch (token)
				{
					case OptionToken optionToken:
						if (optionToken.Name == "option")
						{
							instance.Option = optionToken.Value;
						}
						break;
					case PositionalToken positionalToken:
						if (positionalToken.Position == 0)
						{
							instance.Positional = positionalToken.Value;
						}
						break;
					case FlagToken flagToken:
						if (flagToken.Name == "flag")
						{
							instance.Flag = true;
						}
						break;
					default:
						errors.Add(new UnexpectedArgumentException($"Unexpected token: {token}"));
						break;
				}
			}


			return (instance, errors);
		}
	}

}